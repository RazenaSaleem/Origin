// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	//"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /employee)
	GetEmployees(ctx echo.Context) error

	// (POST /employee)
	CreateEmployee(ctx echo.Context) error

	// (DELETE /employee/{EmployeeID})
	DeleteEmployee(ctx echo.Context, employeeID string) error

	// (PUT /employee/{EmployeeID})
	UpdateEmployee(ctx echo.Context, employeeID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployees(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployees(ctx)
	return err
}

// CreateEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEmployee(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEmployee(ctx)
	return err
}

// DeleteEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "EmployeeID" -------------
	var employeeID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "EmployeeID", runtime.ParamLocationPath, ctx.Param("EmployeeID"), &employeeID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EmployeeID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEmployee(ctx, employeeID)
	return err
}

// UpdateEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "EmployeeID" -------------
	var employeeID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "EmployeeID", runtime.ParamLocationPath, ctx.Param("EmployeeID"), &employeeID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EmployeeID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateEmployee(ctx, employeeID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/employee", wrapper.GetEmployees)
	router.POST(baseURL+"/employee", wrapper.CreateEmployee)
	router.DELETE(baseURL+"/employee/:EmployeeID", wrapper.DeleteEmployee)
	router.PUT(baseURL+"/employee/:EmployeeID", wrapper.UpdateEmployee)

}
